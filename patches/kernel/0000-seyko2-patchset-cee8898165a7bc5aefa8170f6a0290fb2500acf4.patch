diff --git a/linux-2.4.37.11/Makefile b/linux-2.4.37.11/Makefile
index 17c0d25..945abd1 100644
--- a/linux-2.4.37.11/Makefile
+++ b/linux-2.4.37.11/Makefile
@@ -21,6 +21,12 @@ HOSTCFLAGS	= -Wall -Wstrict-prototypes -O2 -fomit-frame-pointer
 
 CROSS_COMPILE 	=
 
+unexport LC_ALL
+unexport LANG
+LC_COLLATE=C
+LC_NUMERIC=C
+export LC_COLLATE LC_NUMERIC
+
 #
 # Include the make variables (CC, etc...)
 #
diff --git a/linux-2.4.37.11/arch/i386/boot/bootsect.S b/linux-2.4.37.11/arch/i386/boot/bootsect.S
index 8a084e6..0bcb2a3 100644
--- a/linux-2.4.37.11/arch/i386/boot/bootsect.S
+++ b/linux-2.4.37.11/arch/i386/boot/bootsect.S
@@ -237,7 +237,7 @@ rp_read:
 #ifdef __BIG_KERNEL__
 					# look in setup.S for bootsect_kludge
 	bootsect_kludge = 0x220		# 0x200 + 0x20 which is the size of the
-	lcall	bootsect_kludge		# bootsector + bootsect_kludge offset
+	lcall	*bootsect_kludge	# bootsector + bootsect_kludge offset
 #else
 	movw	%es, %ax
 	subw	$SYSSEG, %ax
diff --git a/linux-2.4.37.11/arch/i386/boot/setup.S b/linux-2.4.37.11/arch/i386/boot/setup.S
index 8e3bf9d..7f69984 100644
--- a/linux-2.4.37.11/arch/i386/boot/setup.S
+++ b/linux-2.4.37.11/arch/i386/boot/setup.S
@@ -164,7 +164,8 @@ cmd_line_ptr:	.long 0			# (Header version 0x0202 or later)
 					# can be located anywhere in
 					# low memory 0x10000 or higher.
 
-ramdisk_max:	.long __MAXMEM-1	# (Header version 0x0203 or later)
+ramdisk_max:	.long (__MAXMEM-1) & 0xFFFFFFFF
+                                        # (Header version 0x0203 or later)
 					# The highest safe address for
 					# the contents of an initrd
 
@@ -637,7 +638,7 @@ edd_done:
 	cmpw	$0, %cs:realmode_swtch
 	jz	rmodeswtch_normal
 
-	lcall	%cs:realmode_swtch
+	lcall	* %cs:realmode_swtch
 
 	jmp	rmodeswtch_end
 
diff --git a/linux-2.4.37.11/arch/i386/kernel/apm.c b/linux-2.4.37.11/arch/i386/kernel/apm.c
index feac164..7205798 100644
--- a/linux-2.4.37.11/arch/i386/kernel/apm.c
+++ b/linux-2.4.37.11/arch/i386/kernel/apm.c
@@ -327,7 +327,7 @@ extern int (*console_blank_hook)(int);
  * Save a segment register away
  */
 #define savesegment(seg, where) \
-		__asm__ __volatile__("mov %%" #seg ",%0" : "=m" (where))
+		__asm__ __volatile__("movw %%" #seg ",%0" : "=m" (where))
 
 /*
  * Maximum number of events stored
diff --git a/linux-2.4.37.11/arch/i386/kernel/entry.S b/linux-2.4.37.11/arch/i386/kernel/entry.S
index 92951fe..fd70261 100644
--- a/linux-2.4.37.11/arch/i386/kernel/entry.S
+++ b/linux-2.4.37.11/arch/i386/kernel/entry.S
@@ -1,3 +1,4 @@
+#define __ASSEMBLY__
 /*
  *  linux/arch/i386/entry.S
  *
diff --git a/linux-2.4.37.11/arch/i386/kernel/head.S b/linux-2.4.37.11/arch/i386/kernel/head.S
index a3144f0..e82cd3f 100644
--- a/linux-2.4.37.11/arch/i386/kernel/head.S
+++ b/linux-2.4.37.11/arch/i386/kernel/head.S
@@ -1,3 +1,4 @@
+#define __ASSEMBLY__
 /*
  *  linux/arch/i386/kernel/head.S -- the 32-bit startup code.
  *
@@ -41,6 +42,7 @@
  *
  * On entry, %esi points to the real-mode code as a 32-bit pointer.
  */
+.global startup_32
 startup_32:
 /*
  * Set segments to known values
diff --git a/linux-2.4.37.11/arch/i386/kernel/i387.c b/linux-2.4.37.11/arch/i386/kernel/i387.c
index 3e80fba..a4e36b1 100644
--- a/linux-2.4.37.11/arch/i386/kernel/i387.c
+++ b/linux-2.4.37.11/arch/i386/kernel/i387.c
@@ -26,7 +26,7 @@
 #define HAVE_HWFP 1
 #endif
 
-static union i387_union empty_fpu_state;
+union i387_union empty_fpu_state;
 
 void __init boot_init_fpu(void)
 {
diff --git a/linux-2.4.37.11/arch/i386/kernel/pci-pc.c b/linux-2.4.37.11/arch/i386/kernel/pci-pc.c
index 7271e1e..2f31518 100644
--- a/linux-2.4.37.11/arch/i386/kernel/pci-pc.c
+++ b/linux-2.4.37.11/arch/i386/kernel/pci-pc.c
@@ -594,7 +594,7 @@ static unsigned long bios32_service(unsigned long service)
 	unsigned long flags;
 
 	__save_flags(flags); __cli();
-	__asm__("lcall (%%edi); cld"
+	__asm__("lcall *(%%edi); cld"
 		: "=a" (return_code),
 		  "=b" (address),
 		  "=c" (length),
@@ -635,7 +635,7 @@ static int __devinit check_pcibios(void)
 
 		__save_flags(flags); __cli();
 		__asm__(
-			"lcall (%%edi); cld\n\t"
+			"lcall *(%%edi); cld\n\t"
 			"jc 1f\n\t"
 			"xor %%ah, %%ah\n"
 			"1:"
@@ -680,7 +680,7 @@ static int __devinit pci_bios_find_device (unsigned short vendor, unsigned short
 	unsigned short bx;
 	unsigned short ret;
 
-	__asm__("lcall (%%edi); cld\n\t"
+	__asm__("lcall *(%%edi); cld\n\t"
 		"jc 1f\n\t"
 		"xor %%ah, %%ah\n"
 		"1:"
@@ -709,7 +709,7 @@ static int pci_bios_read (int seg, int bus, int dev, int fn, int reg, int len, u
 
 	switch (len) {
 	case 1:
-		__asm__("lcall (%%esi); cld\n\t"
+		__asm__("lcall *(%%esi); cld\n\t"
 			"jc 1f\n\t"
 			"xor %%ah, %%ah\n"
 			"1:"
@@ -721,7 +721,7 @@ static int pci_bios_read (int seg, int bus, int dev, int fn, int reg, int len, u
 			  "S" (&pci_indirect));
 		break;
 	case 2:
-		__asm__("lcall (%%esi); cld\n\t"
+		__asm__("lcall *(%%esi); cld\n\t"
 			"jc 1f\n\t"
 			"xor %%ah, %%ah\n"
 			"1:"
@@ -733,7 +733,7 @@ static int pci_bios_read (int seg, int bus, int dev, int fn, int reg, int len, u
 			  "S" (&pci_indirect));
 		break;
 	case 4:
-		__asm__("lcall (%%esi); cld\n\t"
+		__asm__("lcall *(%%esi); cld\n\t"
 			"jc 1f\n\t"
 			"xor %%ah, %%ah\n"
 			"1:"
@@ -764,7 +764,7 @@ static int pci_bios_write (int seg, int bus, int dev, int fn, int reg, int len,
 
 	switch (len) {
 	case 1:
-		__asm__("lcall (%%esi); cld\n\t"
+		__asm__("lcall *(%%esi); cld\n\t"
 			"jc 1f\n\t"
 			"xor %%ah, %%ah\n"
 			"1:"
@@ -776,7 +776,7 @@ static int pci_bios_write (int seg, int bus, int dev, int fn, int reg, int len,
 			  "S" (&pci_indirect));
 		break;
 	case 2:
-		__asm__("lcall (%%esi); cld\n\t"
+		__asm__("lcall *(%%esi); cld\n\t"
 			"jc 1f\n\t"
 			"xor %%ah, %%ah\n"
 			"1:"
@@ -788,7 +788,7 @@ static int pci_bios_write (int seg, int bus, int dev, int fn, int reg, int len,
 			  "S" (&pci_indirect));
 		break;
 	case 4:
-		__asm__("lcall (%%esi); cld\n\t"
+		__asm__("lcall *(%%esi); cld\n\t"
 			"jc 1f\n\t"
 			"xor %%ah, %%ah\n"
 			"1:"
@@ -1011,7 +1011,7 @@ struct irq_routing_table * __devinit pcibios_get_irq_routing_table(void)
 	__asm__("push %%es\n\t"
 		"push %%ds\n\t"
 		"pop  %%es\n\t"
-		"lcall (%%esi); cld\n\t"
+		"lcall *(%%esi); cld\n\t"
 		"pop %%es\n\t"
 		"jc 1f\n\t"
 		"xor %%ah, %%ah\n"
@@ -1047,7 +1047,7 @@ int pcibios_set_irq_routing(struct pci_dev *dev, int pin, int irq)
 {
 	int ret;
 
-	__asm__("lcall (%%esi); cld\n\t"
+	__asm__("lcall *(%%esi); cld\n\t"
 		"jc 1f\n\t"
 		"xor %%ah, %%ah\n"
 		"1:"
diff --git a/linux-2.4.37.11/arch/i386/kernel/process.c b/linux-2.4.37.11/arch/i386/kernel/process.c
index a248d1f..ce6f1fb 100644
--- a/linux-2.4.37.11/arch/i386/kernel/process.c
+++ b/linux-2.4.37.11/arch/i386/kernel/process.c
@@ -217,7 +217,7 @@ real_mode_gdt_entries [3] =
 	0x000092000100ffffULL	/* 16-bit real-mode 64k data at 0x00000100 */
 };
 
-static struct
+struct
 {
 	unsigned short       size __attribute__ ((packed));
 	unsigned long long * base __attribute__ ((packed));
@@ -544,7 +544,7 @@ void release_thread(struct task_struct *dead_task)
  * Save a segment.
  */
 #define savesegment(seg,value) \
-	asm volatile("mov %%" #seg ",%0":"=m" (value))
+	asm volatile("movw %%" #seg ",%0":"=m" (value))
 
 int copy_thread(int nr, unsigned long clone_flags, unsigned long esp,
 	unsigned long unused,
@@ -661,8 +661,8 @@ void fastcall __switch_to(struct task_struct *prev_p, struct task_struct *next_p
 	 * Save away %fs and %gs. No need to save %es and %ds, as
 	 * those are always kernel segments while inside the kernel.
 	 */
-	asm volatile("mov %%fs,%0":"=m" (prev->fs));
-	asm volatile("mov %%gs,%0":"=m" (prev->gs));
+	asm volatile("movw %%fs,%0":"=m" (prev->fs));
+	asm volatile("movw %%gs,%0":"=m" (prev->gs));
 
 	/*
 	 * Restore %fs and %gs.
diff --git a/linux-2.4.37.11/arch/i386/kernel/setup.c b/linux-2.4.37.11/arch/i386/kernel/setup.c
index d5207e3..4f5f9dc 100644
--- a/linux-2.4.37.11/arch/i386/kernel/setup.c
+++ b/linux-2.4.37.11/arch/i386/kernel/setup.c
@@ -1393,7 +1393,7 @@ static void __init display_cacheinfo(struct cpuinfo_x86 *c)
  */
  
 extern void vide(void);
-__asm__(".align 4\nvide: ret");
+__asm__(".align 4\n.globl vide\nvide: ret");
 
 static int __init init_amd(struct cpuinfo_x86 *c)
 {
diff --git a/linux-2.4.37.11/arch/i386/lib/Makefile b/linux-2.4.37.11/arch/i386/lib/Makefile
index 44a12b7..662f353 100644
--- a/linux-2.4.37.11/arch/i386/lib/Makefile
+++ b/linux-2.4.37.11/arch/i386/lib/Makefile
@@ -9,7 +9,8 @@ L_TARGET = lib.a
 
 obj-y = checksum.o old-checksum.o delay.o \
 	usercopy.o getuser.o \
-	memcpy.o strstr.o
+	memcpy.o strstr.o \
+	dummy_syms.o
 
 obj-$(CONFIG_X86_USE_3DNOW) += mmx.o
 obj-$(CONFIG_HAVE_DEC_LOCK) += dec_and_lock.o
diff --git a/linux-2.4.37.11/arch/i386/mm/pageattr.c b/linux-2.4.37.11/arch/i386/mm/pageattr.c
index 2e70906..96a3b4b 100644
--- a/linux-2.4.37.11/arch/i386/mm/pageattr.c
+++ b/linux-2.4.37.11/arch/i386/mm/pageattr.c
@@ -44,8 +44,12 @@ static struct page *split_large_page(unsigned long address, pgprot_t prot)
 	addr = address & LARGE_PAGE_MASK; 
 	pbase = (pte_t *)page_address(base);
 	for (i = 0; i < PTRS_PER_PTE; i++, addr += PAGE_SIZE) {
-		pbase[i] = mk_pte_phys(addr, 
-				      addr == address ? prot : PAGE_KERNEL);
+                pgprot_t prot1;
+                if (addr == address)
+                        prot1 = prot;
+                else
+                        prot1 = PAGE_KERNEL;
+		pbase[i] = mk_pte_phys(addr, prot1);
 	}
 	return base;
 } 
diff --git a/linux-2.4.37.11/drivers/ide/ide-lib.c b/linux-2.4.37.11/drivers/ide/ide-lib.c
index 5ef91fd..f184588 100644
--- a/linux-2.4.37.11/drivers/ide/ide-lib.c
+++ b/linux-2.4.37.11/drivers/ide/ide-lib.c
@@ -171,7 +171,7 @@ u8 ide_rate_filter (u8 mode, u8 speed)
 		BUG();
 	return min(speed, speed_max[mode]);
 #else /* !CONFIG_BLK_DEV_IDEDMA */
-	return min(speed, XFER_PIO_4);
+	return min(speed, (u8) XFER_PIO_4);
 #endif /* CONFIG_BLK_DEV_IDEDMA */
 }
 
diff --git a/linux-2.4.37.11/include/asm-i386/bugs.h b/linux-2.4.37.11/include/asm-i386/bugs.h
index bb373d9..2deb029 100644
--- a/linux-2.4.37.11/include/asm-i386/bugs.h
+++ b/linux-2.4.37.11/include/asm-i386/bugs.h
@@ -50,8 +50,8 @@ static int __init no_387(char *s)
 
 __setup("no387", no_387);
 
-static double __initdata x = 4195835.0;
-static double __initdata y = 3145727.0;
+double __initdata x = 4195835.0;
+double __initdata y = 3145727.0;
 
 /*
  * This used to check for exceptions.. 
@@ -66,6 +66,8 @@ static double __initdata y = 3145727.0;
  */
 static void __init check_fpu(void)
 {
+	s32 fdiv_bug;
+
 	if (!boot_cpu_data.hard_math) {
 #ifndef CONFIG_MATH_EMULATION
 		printk(KERN_EMERG "No coprocessor found and no math emulation present.\n");
@@ -94,6 +96,8 @@ static void __init check_fpu(void)
 		printk("done.\n");
 	}
 
+	kernel_fpu_begin();
+
 	/* Test for the divl bug.. */
 	__asm__("fninit\n\t"
 		"fldl %1\n\t"
@@ -104,8 +108,12 @@ static void __init check_fpu(void)
 		"fistpl %0\n\t"
 		"fwait\n\t"
 		"fninit"
-		: "=m" (*&boot_cpu_data.fdiv_bug)
+		: "=m" (*&fdiv_bug)
 		: "m" (*&x), "m" (*&y));
+
+	kernel_fpu_end();
+	boot_cpu_data.fdiv_bug = fdiv_bug;
+
 	if (boot_cpu_data.fdiv_bug)
 		printk("Hmm, FPU with FDIV bug.\n");
 }
diff --git a/linux-2.4.37.11/include/asm-i386/hw_irq.h b/linux-2.4.37.11/include/asm-i386/hw_irq.h
index 7bd86fa..c335f2a 100644
--- a/linux-2.4.37.11/include/asm-i386/hw_irq.h
+++ b/linux-2.4.37.11/include/asm-i386/hw_irq.h
@@ -156,6 +156,7 @@ SYMBOL_NAME_STR(x) ":\n\t" \
 asmlinkage void call_do_IRQ(void); \
 __asm__( \
 	"\n" __ALIGN_STR"\n" \
+	".globl common_interrupt\n\t" \
 	"common_interrupt:\n\t" \
 	SAVE_ALL \
 	SYMBOL_NAME_STR(call_do_IRQ)":\n\t" \
@@ -176,8 +177,9 @@ __asm__( \
 asmlinkage void IRQ_NAME(nr); \
 __asm__( \
 "\n"__ALIGN_STR"\n" \
+".globl " SYMBOL_NAME_STR(IRQ) #nr "_interrupt\n\t"\
 SYMBOL_NAME_STR(IRQ) #nr "_interrupt:\n\t" \
-	"pushl $"#nr"-256\n\t" \
+	"pushl $"#nr" - 256\n\t" \
 	"jmp common_interrupt");
 
 extern unsigned long prof_cpu_mask;
diff --git a/linux-2.4.37.11/include/asm-i386/page.h b/linux-2.4.37.11/include/asm-i386/page.h
index 8b6b3ab..4e7a8ad 100644
--- a/linux-2.4.37.11/include/asm-i386/page.h
+++ b/linux-2.4.37.11/include/asm-i386/page.h
@@ -96,7 +96,7 @@ typedef struct { unsigned long pgprot; } pgprot_t;
  * undefined" opcode for parsing in the trap handler.
  */
 
-#if 1	/* Set to zero for a slightly smaller kernel */
+#if 0	/* Set to zero for a slightly smaller kernel */
 #define BUG()				\
  __asm__ __volatile__(	"ud2\n"		\
 			"\t.word %c0\n"	\
diff --git a/linux-2.4.37.11/include/asm-i386/semaphore.h b/linux-2.4.37.11/include/asm-i386/semaphore.h
index ad86f85..e6ea068 100644
--- a/linux-2.4.37.11/include/asm-i386/semaphore.h
+++ b/linux-2.4.37.11/include/asm-i386/semaphore.h
@@ -207,7 +207,7 @@ static inline void up(struct semaphore * sem)
 		"2:\tcall __up_wakeup\n\t"
 		"jmp 1b\n"
 		LOCK_SECTION_END
-		".subsection 0\n"
+		/* ".subsection 0\n" */
 		:"=m" (sem->count)
 		:"c" (sem)
 		:"memory");
diff --git a/linux-2.4.37.11/include/asm-i386/string.h b/linux-2.4.37.11/include/asm-i386/string.h
index acee435..10124c9 100644
--- a/linux-2.4.37.11/include/asm-i386/string.h
+++ b/linux-2.4.37.11/include/asm-i386/string.h
@@ -366,7 +366,7 @@ __asm__ __volatile__(
 return dest;
 }
 
-#define memcmp __builtin_memcmp
+//#define memcmp __builtin_memcmp
 
 #define __HAVE_ARCH_MEMCHR
 static inline void * memchr(const void * cs,int c,size_t count)
diff --git a/linux-2.4.37.11/include/asm-i386/system.h b/linux-2.4.37.11/include/asm-i386/system.h
index fa83113..34940aa 100644
--- a/linux-2.4.37.11/include/asm-i386/system.h
+++ b/linux-2.4.37.11/include/asm-i386/system.h
@@ -28,7 +28,7 @@ extern void FASTCALL(__switch_to(struct task_struct *prev, struct task_struct *n
 		     "popl %%esi\n\t"					\
 		     :"=m" (prev->thread.esp),"=m" (prev->thread.eip),	\
 		      "=b" (last)					\
-		     :"m" (next->thread.esp),"m" (next->thread.eip),	\
+		     :"g" (next->thread.esp),"g" (next->thread.eip),	\
 		      "a" (prev), "d" (next),				\
 		      "b" (prev));					\
 } while (0)
@@ -84,7 +84,7 @@ static inline unsigned long _get_base(char * addr)
 #define loadsegment(seg,value)			\
 	asm volatile("\n"			\
 		"1:\t"				\
-		"mov %0,%%" #seg "\n"		\
+		"movw %0,%%" #seg "\n"		\
 		"2:\n"				\
 		".section .fixup,\"ax\"\n"	\
 		"3:\t"				\
diff --git a/linux-2.4.37.11/include/linux/linkage.h b/linux-2.4.37.11/include/linux/linkage.h
index 23b9ae4..a9fb667 100644
--- a/linux-2.4.37.11/include/linux/linkage.h
+++ b/linux-2.4.37.11/include/linux/linkage.h
@@ -19,11 +19,7 @@
 
 #define SYMBOL_NAME_STR(X) #X
 #define SYMBOL_NAME(X) X
-#ifdef __STDC__
-#define SYMBOL_NAME_LABEL(X) X##:
-#else
-#define SYMBOL_NAME_LABEL(X) X/**/:
-#endif
+#define SYMBOL_NAME_LABEL(X) X:
 
 #ifdef __arm__
 #define __ALIGN .align 0
diff --git a/linux-2.4.37.11/include/linux/sched.h b/linux-2.4.37.11/include/linux/sched.h
index aee6f56..1e2d5e9 100644
--- a/linux-2.4.37.11/include/linux/sched.h
+++ b/linux-2.4.37.11/include/linux/sched.h
@@ -387,7 +387,7 @@ struct task_struct {
 	struct sem_undo *semundo;
 	struct sem_queue *semsleeping;
 /* CPU-specific state of this task */
-	struct thread_struct thread;
+	struct thread_struct thread __attribute((aligned(16))); /* alignment is checked in bugs() */
 /* filesystem information */
 	struct fs_struct *fs;
 /* open file information */
diff --git a/linux-2.4.37.11/include/linux/spinlock.h b/linux-2.4.37.11/include/linux/spinlock.h
index bae52d3..7ff644f 100644
--- a/linux-2.4.37.11/include/linux/spinlock.h
+++ b/linux-2.4.37.11/include/linux/spinlock.h
@@ -41,6 +41,7 @@
 
 #include <linux/stringify.h>
 
+#if 0
 #define LOCK_SECTION_NAME			\
 	".text.lock." __stringify(KBUILD_BASENAME)
 
@@ -51,6 +52,11 @@
 	LOCK_SECTION_NAME ":\n\t"		\
 	".endif\n\t"
 
+#else
+#define LOCK_SECTION_NAME ".text.lock"
+#define LOCK_SECTION_START(extra)	".section " LOCK_SECTION_NAME "\n\t"
+#endif
+
 #define LOCK_SECTION_END			\
 	".previous\n\t"
 
diff --git a/linux-2.4.37.11/net/core/neighbour.c b/linux-2.4.37.11/net/core/neighbour.c
index 19fb2c3..797d799 100644
--- a/linux-2.4.37.11/net/core/neighbour.c
+++ b/linux-2.4.37.11/net/core/neighbour.c
@@ -1319,7 +1319,7 @@ void neigh_table_init(struct neigh_table *tbl)
 	neigh_tables    = tbl;
 	write_unlock(&neigh_tbl_lock);
 
-	if (unlikely(tmp)) {
+	if (unlikely(tmp != 0)) {
 		printk(KERN_ERR "NEIGH: Registering multiple tables for "
 			"family %d\n", tbl->family);
 		dump_stack();
